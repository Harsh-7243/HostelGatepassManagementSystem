Build a full-stack web application for a **College Gatepass System**.

**1. Database Schema & Data:**
Design the database to store a list of **Students**, **Parents**, **Wardens**, and **Security Guards**.
The core table is **GatepassRequests** with the following fields:
* `request_id` (Primary Key)
* `student_id` (Foreign Key)
* `parent_id` (Foreign Key, Pre-defined)
* `date_time_out` (Date and Time of planned exit)
* `duration_hours` (Requested duration in hours)
* `destination` (String)
* `purpose` (String)
* `parent_approval_status` (ENUM: 'Pending', 'Approved', 'Rejected')
* `parent_approval_timestamp` (To track when it was approved/rejected)
* `expiry_timestamp` (Set to 1 hour after request creation)
* `warden_status` (ENUM: 'Open', 'Closed')
* `security_guard_status` (ENUM: 'Out', 'In')

**2. User Roles and Dashboards:**
Create four distinct user dashboards and implement a basic **Authentication system** (Student ID/Password).

* **Student Dashboard:**
    * **Gatepass Application Form:** Fields for `date_time_out`, `duration_hours`, `destination`, and `purpose`.
    * **Request Status View:** A table showing their pending, approved, or expired requests.
* **Parent Dashboard:**
    * **Actionable List:** Show only **Pending** requests from their linked student(s).
    * **Action Button:** A single button next to each request to **Approve** or **Reject**.
    * **Expiry Logic:** Any pending request older than 1 hour (compare request creation time to the current time) should be marked as **Expired** and no longer actionable.
* **Warden Dashboard:**
    * **Oversight View:** A read-only list of *all* **Approved** and **Active** requests, used for auditing.
    * **Closing Action:** A button to mark a request as **Closed** (once the student is back).
* **Security Guard View:**
    * **Check-Out Interface:** A search bar to find a student by ID. When a student is found, only show their **Approved** requests. The Guard can mark the student as **Out**.
    * **Check-In Interface:** The Guard can mark a student who has been marked **Out** as **In**.

**3. Communication Simulation (Crucial Feature):**
Simulate the parent notification process: When a Student submits a request, a link should be generated for the Parent.
* The system should log a message like: "Notification sent to Parent (ID: xxx) with approval link: `/parent/approve/request_id` and rejection link: `/parent/reject/request_id`"
* Clicking these simulated links should update the `parent_approval_status` field directly.

**4. Technology Stack:**
Use a simple, fast web framework like **Python with Flask/Django** or **Node.js with Express**. Use **SQLite** for the database for easy setup.